package ru.psu.web_ontology_doc_checker.resources

const val doc2 = """В современных CASE-средствах для решения различных задач (моделирования структур данных, бизнес-процессов и пр.) специалистами-разработчиками (системными аналитиками, проектировщиками баз данных) используются различные языки моделирования. Кроме того, при создании крупных информационных систем (ИС) возникает необходимость моделирования нескольких предметных областей, для создания моделей которых могут применяться различные языки. В настоящее время для многих областей деятельности ставится задача создания ИС, которые допускали бы участие экспертов (не программистов) как в разработке системы, так и в настройке ее на меняющиеся условия эксплуатации, потребности бизнес-процессов и конкретных пользователей (разработка электронных административных регламентов и пр.). При этом каждому специалисту необходимо обеспечить возможность работы в привычных для него терминах знакомой ему предметной области − ИС становится «мультиязыковой». Предметно-ориентированные языки (Domain Specific Languages, DSL) и языковые инструментарии, предназначенные для их создания, позволяют решить эту задачу, однако остро встает проблема трансформаций построенных моделей при объединении их в одной системе.Таким образом, проблема трансформации моделей, т е переход от описания модели на одном языке моделирования к описанию на другом, стоит достаточно остро при решении задач, связанных с созданием ИС [7]. Остается также нерешенным вопрос открытости большинства CASE-средств: бизнес-процессы, описанные в системе, созданной с помощью одного CASE-средства, не могут быть исполнены системой, созданной с помощью другого, из-за того, что они используют различные нотации описания бизнес-процессов. Именно поэтому создание сквозных, т е исполняемых в различных системах бизнес-процессов, невозможно [2].
При разработке информационных систем широко используются технологии, основанные на применении метамоделирования и предметно-ориентированных языков [1]. Система MetaLanguage представляет собой инструментарий для создания визуальных динамически настраиваемых предметно-ориентированных языков моделирования, используемых при разработке информационных систем [8]. Для задания формальных правил построения моделей в системе используются графовые грамматики. Анализ различных формализмов описания синтаксиса визуальных языков моделирования [4] показал, что наиболее подходящим средством формального задания языков, учитывающим назначение системы MetaLanguage, являются формальные грамматики, представленные в системе ориентированными псевдо-метаграфами.
Формальное описание метаязыка системы MetaLanguage представлено в работе [9]. В работе [3] приведѐн анализ существующих подходов к реализации трансформаций моделей. Наиболее интересные результаты представлены в перечисленных в библиографическом списке публикациях.
В данной статье рассматриваются реализованные в системе MetaLanguage подходы к реализации вертикальных и горизонтальных трансформаций (мета)моделей.
Предметно-ориентированные языки (DSL) – это метамодели, применяемые для разработки моделей при создании ИС. При использовании DSL требуется обеспечить как вертикальные, так и горизонтальные трансформации моделей и языков на различных уровнях.
Существуют различные подходы к реализации трансформаций моделей, однако все они имеют определенные ограничения: тесная интеграция с конкретными платформами и, как следствие, «наследование» ее ограничений; невозможность выбора языка спецификации метамоделей, изменения его описания, поэтому разработчику приходится довольствоваться возможностями, предоставляемыми конкретными языками (UML и OCL), которые не обеспечивают достаточных выразительных средств для пользователей системы – специалистов в предметных областях; невозможность модификации встроенного языка описания трансформаций, хотя некоторые подходы предоставляют в распоряжение пользователя как декларативные, так и императивные языки, однако изменение их описания в соответствии с потребностями конкретной ИС, ее пользователей невозможно; возможность лишь «однонаправленной» трансформации, а для получения обратного преобразования необходимо вручную определить обратное отображение; большинство существующих систем позволяют выполнять лишь полные эквивалентные отображения, без учѐта необходимости сложных преобразований атрибутов, которые часто встречаются при описании бизнес-процессов; в большинстве реализаций существующих подходов не затрагивается проблема трансформации ограничений, налагаемых на концепты и отношения модели, а производится лишь преобразование объектов моделей и связей между ними.
Для решения поставленной проблемы должны быть решены следующие задачи: Разработка формальной модели и алгоритмов горизонтальных и вертикальных трансформаций метамоделей (языков описания предметных областей), снимающих перечисленные выше ограничения. Реализация средств трансформации (мета)моделей в исследовательском прототипе системы трансформации, интегрированном в разработанный ранее DSL-инструментарий, предназначенный для созданий динамически настраиваемых предметно-ориентированных языков. Апробация полученных результатов при разработке моделей информационных систем для различных предметных областей. Для решения поставленных задач предлагается использовать следующие методы и подходы: Для описания исходной и целевой моделей планируется использовать ориентированные типизированные атрибутные метаграфы [3], что позволяет применять данный инструментарий практически в любой предметной области. В качестве формальной основы системы трансформации предлагается использовать правила перезаписи графов. Использование в качестве формальной основы алгебраического подхода к трансформации графов позволяет производить парсинг графа, проверять графовые модели на противоречивость. В языковом инструментарии для обеспечения возможности визуального создания и модификации предметно-ориентированных языко применяются графовые грамматики.
Большинство средств моделирования основываются на использовании UML или же являются специализированными для определенных предметных областей. В данном случае предлагается универсальный подход: базовый уровень метаданных рассматривается как графовая модель системы, на которой реализуются основные алгоритмы ее функционирования. Для создания прототипа CASE-системы, в которую должен быть интегрирован DSL-инструментарий (DSM-платформы), использована технология DSM (Domain Specific Modeling) с интерпретацией моделей. При интерпретации модели применяются методы и алгоритмы, которые в системах с генерацией кода используются для генерации кода по созданной модели.
Над базовым уровнем моделей с помощью DSL-инструментария, базирующегося на графовых грамматиках, создаются метамодели, предметно-ориентированные языки моделирования. Для перехода от одного уровня метамоделей к другому, от одной предметной области системы к другой реализуются трансформации моделей на основе графовых грамматик созданных разработчиками DSL.
Этот подход, обеспечивающий максимальную гибкость системы, не реализован пока в полном объеме ни в одной из существующих промышленных систем, а научные проекты ограничиваются определенными предметными областями. Предлагаемый подход обеспечивает поддержку всего жизненного цикла информационных систем и уникальные возможности их динамической адаптации к различным предметным областям, меняющимся потребностям бизнес-процессов и пользователей.
Вертикальная трансформация – это преобразование, при котором исходная и целевая модель принадлежат различным уровням абстракций, например, при отображении объектов метамодели на объекты модели предметной области.
Определим отображение графа метамодели на граф модели, которому соответствует операция создания графа модели. Такое отображение позволит поддерживать модели в актуальном состоянии, поскольку при модификации метамодели во все модели, созданные на ее основе, будут внесены необходимые изменения.
Введѐм следующие обозначения: множество вершин графа метамодели, соответствующих сущностям; множество вершин графа метамодели, соответствующих отношениям; множество вершин графа метамодели, соответствующих атрибутам всех сущностей; множество вершин графа метамодели, соответствующих атрибутам всех отношений; множество вершин графа модели, соответствующих экземплярам всех сущностей метамодели;  вершин графа модели, соответствующих экземплярам всех отношений метамодели;  множество вершин графа модели, соответствующих значениям атрибутов всех экземпляров сущностей модели; множество вершин графа модели, соответствующих значениям атрибутов всех экземпляров отношений модели.
Множества Ent , Rel , EAttr , RAttr , EntI , RelI , EAttrI , RAttrI являются конечными в каждый фиксированный момент времени, но при создании/удалении экземпляра сущности, экземпляра отношения или их атрибута множества расширяются/сокращаются.
Построим отображение fe, которое для каждой верины-сущности графа метамодели, определяет множество вершин графа модели, соответствующих экземплярам этой сущности, т е, если сущность не является абстрактной и имеет экземпляры;  если сущность является абстрактной или не имеет экземпляров. Отображение fe задает операцию создания вершины, соответствующей экземпляру сущности.
Построим отображение множества вершин EAttr графа метамодели, соответствующих атрибутам сущностей, на множество вершин графа модели EAttrI.
Отображению fea соответствует операция задания значений атрибутам экземпляра сущности.
Рассмотрим множество вершин графа метамодели, которые соответствуют отношениям. Каждой такой вершине поставим в соответствие множество вершин графа модели, которое соответствует экземплярам определенного отношения, в результате получим отображение fr, такое, что выполняется, если отношение имеет экземпляры; если отношение экземпляров не имеет.
Данное отображение определяет операцию создания вершины, соответствующей экземпляру отношения. Определим операцию задания значений атрибутов экземпляра отношения. Для этого построим отображение множества вершин графа метамодели RAttr , соответствующих набору атрибутов отношения, на множество вершин графа модели, соответствующих значениям атрибутов RAttrI : fra причѐм.
Таким образом, отображения fe , fea, fr, fra задают соответствие между множеством вершин графа метамодели и множеством вершин графа модели (см рис 1) на множество вершин графа модели. Теперь определим правила, согласно которым дугам графа GMM ставятся в соответствие дуги графа GM.
Построим отображение gea : EEA EEAI , ставящее каждой дуге множества EEA графа метамодели в соответствие определенные дуги из множества EEAI графа модели, т е. Аналогично можно определить отображение gra, для которого выполняется. Построим отображение ger, ставящее каждой дуге множества EERR графа метамодели в соответствие определенные дуги из множества EERRI графа модели, т е.
Таким образом, отображения gea, gra , ger задают соответствие между множеством дуг графа метамодели и множеством дуг графа модели.
Создание графа модели – это отображение графа метамодели на граф модели, при котором выполняются преобразования fe , fea, fr, fra , gea, gra, ger.
Построим отображение графа модели на граф метамодели. Оно определяет операцию интерпретации модели, что позволяет выполнять операции над экземплярами сущностей и проверять ограничения, наложенные на сущности и отношения. Поскольку вершины графа модели являются экземплярами вершин графа метамодели, то можно задать отображение множества вершин графа GM на множество вершин графа GMM.
Построим сюръекцию , которая каждому экземпляру сущности модели ставит в соответствие сущность метамодели, причем несколько элементов множества EntI могут соответствовать одной сущности, т е выполняется. Построим отображение обратное отображению fea.
Такая сюръекция каждой вершине множества EAttrI ставит в соответствие единственную вершину множества EAttr, т е, причем несколько элементов множества EAttrI могут соответствовать одному элементу множества EAttr, т е выполняется.
Рассмотрим множество вершин графа модели, которые соответствуют экземплярам отношений. Каждой такой вершине поставим в соответствие единственную вершину графа метамодели, которая соответствует заданному отношению, в результате получим сюръективное отображение fr, такое, что выполняется, причем несколько экземпляров отношения могут быть созданы на основе одного отношения, т е выполняется.
Сюръективное отображение fra, обратное отображению fra , каждой вершине модели, соответствующей значению атрибута отношения, ставит в соответствие единственную вершину метамодели из множества RAttr, причем, причем несколько элементов множества RAttrI могут соответствовать одному элементу множества RAttr, т.е выполняется.
Таким образом, четыре отображения задают соответствие между множеством вершин графа модели и множеством вершин графа метамодели (см рис 2). Для перемещения между сущностями, отношениями и их экземплярами расширим множество дуг графа модели дугами-ссылками, соединяющими экземпляры сущностей и отношений с теми сущностями и отношениями метамодели, на основе которых они созданы. Обозначим множество таких дуг через Ent.
Теперь определим правила, согласно которым дугам графа модели GM ставятся в соответствие дуги графа метамодели GMM. Построим отображение gea, ставящее каждой дуге множества EEAI графа модели в соответствие единственную дугу из множества EEA графа метамодели, т е. Как видно из определения, отображения gea и gra сюръективны.
Построим сюръективное отображение ger  1 : EERRI EERR ,
ставящее каждой дуге множества EERRI графа модели в соответствие единственную дугу из множества EERR графа метамодели, т е.
Таким образом, отображения gea1 , gra  1 , ger 1 определяют однозначное соответствие между множеством ребер графа модели и множеством ребер графа метамодели.
Интерпретация модели – это отображение графа модели на граф метамодели, при котором выполняются преобразования.
Горизонтальная трансформация – это преобразование, при котором исходная и целевая модели принадлежат одному уровню абстракций. Примером горизонтальной трансформации является рефакторинг [5].
Существуют различные подходы к реализации горизонтальных трансформаций, определяемые связями, создаваемыми между (мета)моделями в системе, реализующей трансформации (рис 3): явные типизированные связи (explicit typed references), неявные мягкие связи (implicit soft references) и сложные семантические связи (complex semantic connections). При использовании явных типизированных ссылок связь между моделями становится «монолитной», задаѐт жѐсткую зависимость между языками, что затрудняет повторное использование построенных предметно-ориентированных языков, созданных с их использованием моделей. Реализация мягких неявных связей основывается на установлении «строкового» соответствия между значениями атрибутов в моделях. Использование моделей и выполнение трансформаций в этом случае возможно только при наличии DSM-платформы, которая «знает» языки и может обрабатывать установленные связи, «разрешать ссылки». Реализация сложных семантических связей обеспечиваем максимум возможностей при создании мультиязыковых систем, в которых создаются и могут изменяться различные DSLs. Однако создание DSM-платформ, обеспечивающих такие возможности, – сложная задача, которую можно решить только на основе соответствующих формальных средств.
Представленные графовые модели, описанные в [6, 8, 9], дают возможность реализации системы горизонтальных трансформаций, удовлетворяющей всем предъявляемым к такой системе требованиям. Одним из наиболее часто используемых формализмов описания синтаксиса визуальных языков моделирования являются графовые грамматики. Правила вывода системы графовых грамматик могут быть представлены в виде набора пар псевдо-метаграфов, описывающих левую и правую части продукций.
Для внутреннего представления правил грамматики используется один граф, элементы которого содержат информацию о том, к какой части правила они относятся. Для пользователя же строится и визуализируется стандартное представление графовых грамматик, где правила имеют левую и правую части. Система последовательно проверяет каждое правило в грамматике на возможность его применения. Для этого в хост-графе ищется подграф, изоморфный левой части правила. На рис 4 показана блок-схема алгоритма исполнения графовой грамматики.
Для реализации перебора используется специальный класс NodeSet, хранящий набор вершин и их индексы в хост-графе. В ходе исполнения грамматики система строит набор вершин, содержащий вершины с индексами 0..М, где М – количество вершин в левой части применяемого правила. Затем последовательно строятся все перестановки данного набора, и каждая проверяется на соответствие искомому графу. Если ни одна из перестановок не соответствует искомому графу,
то набор вершин NodeSet заменяется на следующий по порядку. Для него выполняется перебор перестановок. Это происходит до тех пор, пока не найдѐтся подграф, изоморфный левой части правила, либо будет установлено, что подходящей перестановки нет.
Если какое-то правило можно применить к данному хост-графу, оно применяется. Каждая вершина и дуги из левой части правила заменяются соответствующими элементами из правой части согласно правилу. Значения полей новых элементов вычисляются на основе данных начальных вершин и дуг по правилам, указанным в грамматике. Если ни одно из правил применить нельзя, то исполнение грамматики завершено.
При разработке грамматики пользователь может расширить формализмы новыми вершинами и дугами. Такие расширения могут использоваться для снижения трудоѐмкости работы по рисованию графов. Так, например, если в табличном формализме, реализуемом в реляционных СУБД, нет связи «многие-со-многими», пользователь будет вынужден создавать дополнительную таблицу для реализации каждой такой связи. При использовании созданного инструментария он может создать дугу нового типа на основе имеющихся элементов. Аналогично, если в предметной области часто используется определѐнная структура, имеет смысл создать новую вершину, которая будет представлять соответствующий подграф. Для этого необходимо описать «расшифровку» новой вершины/дуги с помощью имеющихся элементов формализма, еѐ название и, если создаѐтся новая вершина, визуальный образ (дуги их не имеют). Этот новый тип элементов будет содержать поля всех элементов соответствующего подграфа (расшифровки). Созданный элемент может быть использован для описания новых типов вершин и дуг. При создании нового элемента пользователь может создать его в специальном окне редактора, а может сначала нарисовать граф в редакторе правил, выделить в нем соответствующий подграф и создать представляющий его элемент.
В перспективе разработанный алгоритм может быть оптимизирован – усовершенствован может быть алгоритм определением применимости правила (сопоставления левой части правила подграфам хост-графа). Возможные подходы к оптимизации рассматриваются в одной из статей настоящего сборника.
С каждым годом интерес научного сообщества к проблеме трансформации моделей растет, об этом свидетельствует наличие большого числа публикаций, в которых рассматриваются различные подходы к описанию трансформаций [6]. В статье представлены теоретические основы реализации трансформаций моделей, приведено описание формальных моделей и алгоритмов, реализация которых позволяет снять ограничения, присущие другим подходам. Графовые грамматики позволяют наглядно описать преобразования, которые должны происходить в системе при выполнении заданных в грамматике операций. Реализованные в исследовательском прототипе средства могут быть оптимизированы в ходе дальнейших исследований.
"""
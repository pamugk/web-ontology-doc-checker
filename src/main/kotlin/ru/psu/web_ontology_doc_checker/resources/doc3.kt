package ru.psu.web_ontology_doc_checker.resources

const val doc3 = """Рассмотрим технологии и инструментальные средства, которые в будущем будут использованы при разработке редактора для DSM-платформы, поддерживающей многомодельный подход. Кроме описания использованных технологий и средств также будут приведены критерии, по которым производился выбор средств и технологий.
В связи с тем, что разрабатываемый редактор для DSM-платформы должен будет иметь возможность использовать разработанную ранее систему экспорта-импорта визуальных моделей и связанную с ней библиотеку классов для представления визуальных моделей, которые были разработаны с использованием Java 8, целевой язык разработки редактора для DSM-платформы должен иметь реализацию для JVM, совместимую с байт-кодом Java версии 52 (который соответствует Java 8).
Несмотря на то, что в несовместимых с JVM реализациях некоторых языков имеется возможность использовать скомпилированные классы Java как, например, в C++ с использованием механизма JNI [11], такая возможность рассматриваться не будет, т.к. она связана с потенциальной потерей как производительности, так и стабильности при работе программы. С учётом всего вышесказанного, для сравнения были выбраны 7 основных JVM-языков (согласно [12]): Clojure, Groovy, Java, JRuby, Jython Kotlin, Scala.
При выборе целевого языка программирования учитывались следующие критерии. Поддержка объектно-ориентированной парадигмы программирования.  Поддержка статической типизации.  Наличие компилятора.
Результаты анализа языков программирования по выбранным критериям может быть представлено в виде таблицы.
После анализа основных существующих объектно-ориентированных языков программирования было решено, что в качестве целевого языка будут использованы два языка программирования: Java и Kotlin, так как они оба удовлетворяют предъявленным требованиям, и при этом полностью совместимы [13]. Конкретная область и доля применения выбранных языков будет определена в ходе разработки.
В качестве целевого языка для компиляции разрабатываемого приложения будет использована Java 8 как одна из наиболее распространённых версий Java на данный момент, что позволит охватить значительное число конечных пользователей.
При разработке графического интерфейса пользователя будет использован декларативный подход, так как он позволяет отделить логику приложения от определения графического интерфейса и, в некоторой степени, уменьшить зависимость приложения от конкретной библиотеки/конкретного фреймворка для разработки графического интерфейса [14].
Также в связи с тем, что редактор для DSM-платформы необходимо будет реализовать в сжатые сроки, при разработке графического интерфейса будет использоваться технология быстрой разработки приложений (англ. RAD — Rapid Application Development) [15].
Для облегчения обнаружения и исправления изменений в программном коде, негативно влияющих на разрабатываемую программу, будет использовано версионирование, так как оно позволяет структурировать информацию о том, что и когда было изменено в программном коде, что, в свою очередь, позволяет разработчику в ходе отладки программы сфокусировать своё внимание на тех местах программы, где со времени последней стабильной версии были внесены изменения и, таким образом, сэкономить время на отладку.
Для обеспечения возможности относительно простого управления сборкой проекта будет использоваться декларативная сборка приложения, так как она позволяет определять производимые при сборке приложения действия за счёт описания спецификации сборки проекта без необходимости описывать по отдельности каждое действие сборки.
Так как редактор для DSM-платформы будет разрабатываться как настольное приложение с графическим интерфейсом, при разработке понадобятся инструментальные средства для разработки графического интерфейса. В первую очередь это — фреймворк для создания приложений с графическим интерфейсом для Java и/или Kotlin.
Выбор средства для разработки графического интерфейса производился на основании следующих критериев. Кроссплатформенность, эквивалентная кроссплатформенности JVM. Поддержка декларативной разработки графического интерфейса. Наличие RAD-средства.  Поддержка любого языка таблиц стилей.
Результаты анализа фреймворков для разработки графического интерфейса настольных приложений для целевых языков могут быть представлены в виде таблицы.
По результатам анализа фреймворков для разработки графического интерфейса для целевых языков был выбран JavaFX, так как из актуальных фреймворков для разработки графического интерфейса лишь он удовлетворяет всем предъявленным требованиям.
Учитывая то, что помимо Java в разработке предполагается использовать Kotlin, вкупе с JavaFX будет использована его реализация для Kotlin — TornadoFX в связи с тем, что его использование с Kotlin более оптимально, чем JavaFX, и при этом его использование не исключает возможность использования дополнительных библиотек для JavaFX [18].
Для разработки на Java будет использован набор инструментов разработчика приложений на Java (JDK) Liberica JDK 11 от Bellsoft, включающий в себя набор стандартных библиотек Java, JRE и JavaFX.
Использование версии от Oracle исключено в связи с тем, что согласно обновлённой версии лицензионного соглашения Java Oracle [17], Oracle поставляет версии JDK с долгосрочной поддержкой только корпоративным клиентам.
Использование версии OpenJDK от сообщества исключено из-за того, что она не включает обновления безопасности от Oracle, а использование в программном продукте библиотек, потенциально содержащих проблемы с производительностью, безопасностью и прочие дефекты, неприемлемо.
Из всех версий OpenJDK была выбрана именно Liberica JDK, так как она полностью бесплатна и общедоступна (в том числе и версии JDK с долгосрочной поддержкой), включает в себя все обновления JDK, полностью соответствует стандарту Oracle Java и включает библиотеки JavaFX (которые были исключены из JDK начиная с 11 версии и теперь, как правило, поставляются отдельно).
Несмотря на то, что предполагается использовать 8 версию Java, использоваться будет JDK версии 11, так как на данный момент это последняя версия JDK с долгосрочной поддержкой, поэтому при необходимости развития разрабатываемой системы всё эту же версию JDK можно будет продолжать использовать в течении нескольких лет, и при этом JDK будет получать обновления, что, в идеале, положительно повлияет на работоспособность разрабатываемого редактора.
В этой главе были описаны технологии и инструментальные средства, которые будут необходимы при разработке редактора для DSM-платформы, поддерживающей многомодельный подход.
В следующей главе с опорой на разработанную теоретическую основу и выбор технологий и инструментальных средств будет произведено проектирование редактора для DSM-платформы, поддерживающей многомодельный подход.
"""